Activity,Start,End,Duration,Speaker,Meetup ID,Description,Notes
Doors Open,8:30 AM,9:10 AM,0:40,,,,
Opening Remarks,9:10 AM,9:15 AM,0:05,,,,
Scalaz-Stream Masterclass,9:15 AM,10:00 AM,0:45,Rúnar Ó. Bjarnason,4283131,"Scalaz-Stream (soon to be called ""FS2"" or ""Functional Streams for Scala"") is a library that lets us write compositional, modular, safe, and efficient asynchronous I/O using an expressive purely functional API. In this hands-on talk we'll see how to get started with the library, cook up a few streams, and look at ways of combining them into larger systems.",
Break,10:00 AM,10:10 AM,0:10,,,,
Spark Datasets: A comparison with RDDs and DataFrame Queries,10:10 AM,10:55 AM,0:45,Brian Clapper,12380763,"Traditionally, Apache Spark jobs have been written using Resilient Distributed Datasets (RDDs), a Scala Collections-like API. RDDs are type-safe, but they can be problematic: It's easy to write a suboptimal job, and RDDs are significantly slower in Python than in Scala. DataFrames address some of these problems, and they're much faster, even in Scala; but, DataFrames aren't type-safe, and they're arguably less flexible.

Enter Datasets, a type-safe, object-oriented programming interface that works with the DataFrames API, provide some of the benefits of RDDs, and can be optimized via the Catalyst optimizer.

This talk will briefly recap RDDs and DataFrames, introduce the Datasets API, and then, through a live demonstration, compare the performance of all three against the same non-trivial data source.",
Break,10:55 AM,11:15 AM,0:20,,,,
"Macros for Mortals: Or, How I Learned To Stop Worrying and Mumbling “WTF”?",11:15 AM,11:45 AM,0:30,Brendan McAdams,10987883,"Since their introduction in 2.10, Macros have veritably taken Scala by storm. They pop up everywhere, often providing elegant syntax extensions for Scala libraries – note the prevalence of “sql” string interpolation macros, for example.

Many developers, however, are scared and confused by Macros – rightly so. Many examples of Macros require deep knowledge of the Scala AST, internals and oddities. But hope exists: newer features like quasiquotes make it ridiculously easy to write powerful Macros with code templating.

In this talk, we’ll demystify just how Macros work and are constructed, walking through many of the different “types” of Macros that Scala supports. A final focus will be given to the use of the newer Quasiquotes and Annotations features as a way of quickly constructing powerful new code features in your own Scala code.",
Break,11:45 AM,11:55 AM,0:10,,,,
The Stairway to Pleasantville: Logic Programming in Scala,11:55 AM,12:10 PM,0:15,Stewart Stewart,133346372,"Logic programming is perhaps underappreciated compared to its declarative sibling, Functional Programming. In this lightning talk, we will examine a logic programming DSL built on top of microKanren in Scala. We will demonstrate it's expressive power by using it to help us find the solution(s) to a particularly mind-bending variant of a classic puzzle. The goal is to show that we can solve problems relationally yet write what feels like idiomatic, functional Scala.",
Monadic Logging and You,12:10 PM,12:25 PM,0:15,Martin Snyder,47235822,"Logging is more complicated than most people realize, and when they do, it's too late to do anything about it until ""next time."" Learn how to use a writer monad as a logging mechanism in your code. More importantly though, learn why you would want to do this, and what the benefits are.

There is a price to pay in adopting this approach, but it's more ""functional"", addresses existing challenges, and enables new, exciting capabilities.",
Lunch,12:25 PM,1:40 PM,1:15,,,,
Distributed Real-Time Stream Processing: Why and How,1:40 PM,2:25 PM,0:45,Petr Zapletal,87846052,"The demand for stream processing is increasing a lot these day. Immense amounts of data has to be processed fast from a rapidly growing set of disparate data sources. This pushes the limits of traditional data processing infrastructures. These stream-based applications include trading, social networks, Internet of things, system monitoring, and many other examples.

A number of powerful, easy-to-use open source platforms have emerged to address this. But a same problem can be solved differently, various but sometimes overlapping use-cases can be targeted or different vocabularies for similar concepts can be used. This may lead to confusion, longer development time or costly wrong decisions.

In this talk we are going to discuss various state of the art open-source distributed streaming frameworks, their similarities and differences, implementation trade-offs and their intended use-cases. Apart of that, I’m going to speak about Fast Data, theory of streaming, framework evaluation and so on. My goal is to provide comprehensive overview about modern streaming frameworks and to help fellow developers with picking the best possible for their particular use-case.",
Break,2:25 PM,2:35 PM,0:10,,,,
Testing in Future Space,2:35 PM,3:05 PM,0:30,Bill Venners,14780191,"In ScalaTest 3.0's new async testing styles, tests have a result type of Future[Assertion]. Instead of blocking until a future completes, then performing assertions on the result, you map assertions onto the future and return the resulting Future[Assertion] to ScalaTest. The test will complete asynchronously when the Future[Assertion] completes. This way of testing requires a different mindset. In this talk I'll walk you through the design, show you how to use it, and suggest best practices for async testing on both the JVM and Scala.js.",
Break,3:05 PM,3:15 PM,0:10,,,,
"Fun, fast, intuitive, composable, statically checked builds written in Scala",3:15 PM,3:45 PM,0:30,Jan Christopher Vogt,99425812,"This talk demos a vision that started to leak into reality as small prototypes. A vision of a world where writing and maintaining build scripts is fun and not black magic. A world without scoped-multi-config-multi-project builds. With fast dependency resolution. Intuitive and statically checked build configuration. Where large builds are composed from small self-contained and easy to understand builds. Where you only need to learn a small Scala library nothing more. We’ll talk about concepts, implementation specifics and do a live demo. This is not a complete tool, but a collection of crucial pieces and insights that may one day contribute to one.",
Break,3:45 PM,4:05 PM,0:20,,,,
"Coroutines in Scala: Concept, Definition & Utility",4:05 PM,4:35 PM,0:30,Randy Shepherd,7788685,"Aleksandar Prokopec, a programming languages researcher at EPFL, recently released a library-level extension for the Scala programming language that introduces first-class coroutines. So what is a coroutine? Where did they come from? How are they implemented? What do they look like in Scala? What are they good for? In this introductory-level talk we will attempt to answer these questions.",
Break,4:35 PM,4:45 PM,0:10,,,,
From Websockets to Kafka with Akka Streams,4:45 PM,5:00 PM,0:15,Paul G. Kinsky,88028382,"Your app is a hit. Everyone's using your service. You've instrumented your website to collect real time usage data and you've set up a data processing pipeline to work with large amounts of data in real time, but how do you bridge the gap between web page and data pipeline? With websockets, Kafka and Akka Streams, of course!

This talk covers using Akka Streams and Akka HTTP to, in less than 100 lines of code, build a server that consumes streams of events via websocket and publishes them to a Kafka topic, after which you can use the data analysis framework of your choice to analyze them to your heart's content.",
Type Members vs Type Parameters,5:00 PM,5:15 PM,0:15,Jon Pretty,13734441,"Scala's type system provides generics in two ways: type members and type parameters, and most advanced Scala developers will use both in their code at different times. But how do we choose between them? Usually one or the other will feel ""right"" for a particular use case, and—if not—we can usually refactor and take the alternative approach. But could we learn to be better at making the ""right"" choice first time? I'll explore the most important considerations when choosing between them, and look at whether they are completely interchangeable in all cases, or whether certain scenarios force us down one path or the other.",
Closing Remarks,5:15 PM,5:20 PM,0:05,,,,
Drink-up,6:00 PM,9:00 PM,3:00,,,"Sponsored by [Chariot Solutions](#sponsors), the drink-up will be held downstairs, at [JG Domestic](http://philadelphia.jgdomestic.com/), from 17:30 to 19:30. Beer, wine, and soft drinks are free (yes, _free_ as in _beer_). Other drinks are available for purchase. Light appetizers and happy hour munchies will also be served. Bring your name tag.",markdown permitted in description